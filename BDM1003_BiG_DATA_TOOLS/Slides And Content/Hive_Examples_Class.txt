=========================================================================================================================================
								Hive Class Examples:
=========================================================================================================================================

1. Database 
2. Tables
3. Internal table, External table
4. Load data from local and HDFS
5. Partitions
6. Joins
7. Buckets
8. Serde

=========================================================================================================================================
								Create Tables
=========================================================================================================================================
create database if not exists student;
show databases;
use student;
describe database student;
create table if not exists student ( name string, id int , year int);
show tables;

create table if not exists student1 ( name string, id int , year int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;
create external table if not exists student3 ( name string, id int , year int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;
=========================================================================================================================================
								Load Data
=========================================================================================================================================
load data local inpath '/home/hadoop/work/hive_inputs/student.txt' overwrite into table student1;
select * from student1;

load data local inpath '/home/hadoop/work/hive_inputs/student.txt' overwrite into table student2;
select * from student2;
load data local inpath '/home/hadoop/work/hive_inputs/student1.txt' into table student2;
select * from student2;


Hadoop: Execute: Exit.
hadoop fs -put /home/hadoop/work/hive_inputs/ /home/hadoop/work/hive_inputs/
hadoop fs -put /home/hadoop/work/hive_inputs/student.txt /home/hadoop/work/hive_inputs/student.txt

Hive: use student;
load data inpath '/home/hadoop/work/hive_inputs/student.txt' overwrite into table student2;

Move Operation. Source file will be deleted.
load data inpath '/home/hadoop/work/hive_inputs/student.txt' into table student2;

hadoop fs -put /home/hadoop/work/hive_inputs/student.txt /home/hadoop/work/hive_inputs/student.txt

load data local inpath '/home/hadoop/work/hive_inputs/student.txt' overwrite into table student;
load data local inpath '${env:HOME}/work/hive_inputs/student.txt' overwrite into table student;

=========================================================================================================================================
								Print Commands
=========================================================================================================================================
set hive.cli.print.current.db=true;
set hive.cli.print.header=true;
=========================================================================================================================================
								Hive Internal/ External Tables
=========================================================================================================================================
create table if not exists studentcomment 
( name string comment 'student name', id int comment 'student id', year int comment 'student year') 
row format delimited 
fields terminated by '\t' 
lines terminated by '\n' 
stored as textfile;

create external table if not exists studentexternal 
( name string comment 'student name', id int comment 'student id', year int comment 'student year') 
row format delimited 
fields terminated by '\t' 
lines terminated by '\n' 
stored as textfile;

Input File: (student.txt)
arun	1	1
anil	3	1
rahul	4	2
venkat	2	2
kumar	5	1

load data local inpath '/home/hadoop/work/hive_inputs/student.txt' overwrite into table student;
load data local inpath '${env:HOME}/work/hive_inputs/student.txt' overwrite into table student;
hadoop fs -put /home/hadoop/work/hive_inputs/student.txt /home/hadoop/work/hive/externaldata/student.txt
create external table if not exists studentext1 ( name string, id int , year int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;
load data local inpath '${env:HOME}/work/hive_inputs/student.txt' overwrite into table studentext1;
select * from studentext1;
describe formatted studentext1;
create external table if not exists studentext2 ( name string, id int , year int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile location '/home/hadoop/work/hive/externaldata/';
select * from studentext2;
describe formatted studentext2;


=========================================================================================================================================
							Collection data types:
=========================================================================================================================================
map 
array
struct
union

create table if not exists studentcollections 
(
name string comment 'student name', 
marks map<string,int> comment 'student marks', 
subjects array<string>, 
address struct< loc : string comment 'student location', pincode : int comment 'student pincode', city : string comment 'student city'>
) 
row format delimited 
fields terminated by '#' 
collection items terminated by ','
map keys terminated by ':'
lines terminated by '\n' 
stored as textfile;

sample data:
------------
arun#math:10,phy:20,chem:50#math,phy,chem#ameerpet,500001,hyderabad
anil#math:13,phy:30,chem:60#math,phy,chem#srnagar,500002,hyderabad
rahul#math:30,phy:22,chem:30#math,phy,chem#hitech,500003,hyderabad
venkat#math:40,phy:23,chem:60#math,phy,chem#sec,500004,hyderabad
kumar#math:50,phy:20,chem:40#math,phy,chem#lbngar,500005,hyderabad

load data local inpath '${env:HOME}/work/hive_inputs/studentcollections.txt' overwrite into table studentcollections;
select * from studentcollections;
select name, marks['math'], subjects[0], address.pincode from studentcollections;
insert overwrite local directory '/home/hadoop/work/hive_inputs/studentcollections' select name, marks['math'], subjects[0], address.pincode from studentcollections;
insert overwrite local directory '/home/hadoop/work/hive_inputs/studentcollections' select * from studentcollections;

=========================================================================================================================================
													Partitions:
=========================================================================================================================================
create table if not exists partitiontable(name string, id int ) partitioned by (year int);
create table if not exists partitiontable(name string, id int ) partitioned by (year int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;
load data local inpath '${env:HOME}/work/hive_inputs/student1.txt' overwrite into table partiontable partition(year='1');
load data local inpath '${env:HOME}/work/hive_inputs/student2.txt' overwrite into table partiontable partition(year='2');
show partitions partitiontable;  
select * from partitiontable where year=1;
select * from partitiontable where year=2;
set hive.exec.dynamic.partion.mode=nonstrict;
create table if not exists partitiontabledynamic(name string, id int ) partitioned by (year int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;
load data local inpath '${env:HOME}/work/hive_inputs/student.txt' overwrite into table partitiontabledynamic partition(year);
insert overwrite table partiontabledynamic partition(year) select * from student2;
insert overwrite table partiontabledynamic partition(year=1) select name,id from student where year=1;

=========================================================================================================================================
														Hive System Commands
=========================================================================================================================================
hadoop@hadoop:~$ hive -e 'select * from student1;';
hadoop@hadoop:~$ hive -S -e 'select * from student;';
hadoop@hadoop:~$ hive -e 'use default; select * from student1; select * from student2;';
hadoop@hadoop:~$ hive -e 'use hive; select * from student1; select * from student2;';
hadoop@hadoop:~$ hive -f '/home/hadoop/work/hive_inputs/parttable.hql';
hive> source /home/hadoop/work/hive_inputs/parttable.hql;
hadoop@hadoop:~$ hadoop fs -ls /
hive> dfs -ls / ;
hadoop@hadoop:~$ ls /
hive> ! ls /;

=========================================================================================================================================
														Joins:
=========================================================================================================================================
create table if not exists products (name string, id int , price int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;
create table if not exists sales (name string, year int , percentage int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;

products:
books	1	10
java	2	100
hadoop	3	1000
python	4	500

sales:
books	2010	10
books	2012	20
java	2013	50
java	2012	13
java	2011	20
hadoop	2010	10
hadoop	2013	40

load data local inpath '${env:HOME}/work/hive_inputs/products.txt' overwrite into table products;
load data local inpath '${env:HOME}/work/hive_inputs/sales.txt' overwrite into table sales;

select * from products;
books	1	10
java	2	100
hadoop	3	1000
python	4	500

select * from sales;
books	2010	10
books	2012	20
java	2013	50
java	2012	13
java	2011	20
hadoop	2010	10
hadoop	2013	40


Inner Join:
-----------
select products.* , sales.* from products join sales on products.name = sales.name;

books	1	10	books	2010	10
books	1	10	books	2012	20
hadoop	3	1000	hadoop	2010	10
hadoop	3	1000	hadoop	2013	40
java	2	100	java	2013	50
java	2	100	java	2012	13
java	2	100	java	2011	20


Left Outer Join:
----------------
select products.* , sales.* from products left outer join sales on products.name = sales.name;
books	1	10	books	2010	10
books	1	10	books	2012	20
hadoop	3	1000	hadoop	2010	10
hadoop	3	1000	hadoop	2013	40
java	2	100	java	2013	50
java	2	100	java	2012	13
java	2	100	java	2011	20
python	4	500	NULL	NULL	NULL


Right Outer Join:
-----------------
select products.* , sales.* from products right outer join sales on products.name = sales.name;
books	1	10	books	2010	10
books	1	10	books	2012	20
hadoop	3	1000	hadoop	2010	10
hadoop	3	1000	hadoop	2013	40
java	2	100	java	2013	50
java	2	100	java	2012	13
java	2	100	java	2011	20


Full Outer Join:
------------------
select products.* , sales.* from products full outer join sales on products.name = sales.name;
books	1	10	books	2010	10
books	1	10	books	2012	20
hadoop	3	1000	hadoop	2010	10
hadoop	3	1000	hadoop	2013	40
java	2	100	java	2013	50
java	2	100	java	2012	13
java	2	100	java	2011	20
python	4	500	NULL	NULL	NULL

Map Join:
---------
select /*+ mapjoin(sales) */ products.* , sales.* from products join sales on products.name = sales.name;
books	1	10	books	2010	10
books	1	10	books	2012	20
java	2	100	java	2013	50
java	2	100	java	2012	13
java	2	100	java	2011	20
hadoop	3	1000	hadoop	2010	10
hadoop	3	1000	hadoop	2013	40


select /*+ mapjoin(products) */ products.* , sales.* from products join sales on products.name = sales.name;
books	1	10	books	2010	10
books	1	10	books	2012	20
java	2	100	java	2013	50
java	2	100	java	2012	13
java	2	100	java	2011	20
hadoop	3	1000	hadoop	2010	10
hadoop	3	1000	hadoop	2013	40


select /*+ mapjoin(products) */ products.* , sales.* from products right outer join sales on products.name = sales.name;
books	1	10	books	2010	10
books	1	10	books	2012	20
java	2	100	java	2013	50
java	2	100	java	2012	13
java	2	100	java	2011	20
hadoop	3	1000	hadoop	2010	10
hadoop	3	1000	hadoop	2013	40
python	4	500	NULL	NULL	NULL

select /*+ mapjoin(sales) */ products.* , sales.* from products left outer join sales on products.name = sales.name;
books	1	10	books	2010	10
books	1	10	books	2012	20
java	2	100	java	2013	50
java	2	100	java	2012	13
java	2	100	java	2011	20
hadoop	3	1000	hadoop	2010	10
hadoop	3	1000	hadoop	2013	40


Semi Join:
----------
select * from products left semi join sales on products.name = sales.name;
select * from sales right semi join products on sales.name = products.name;

books	1	10
hadoop	3	1000
java	2	100


=========================================================================================================================================
													Buckets:
=========================================================================================================================================
create table users (name string, id int) row format delimited fields terminated by '\t' stored as textfile;
load data local inpath '${env:HOME}/work/hive_inputs/users.txt' overwrite into table users;
create table bucketed_users (name string, id int) clustered by (id) into 4 buckets;
create table bucketed_sorted_users (name string, id int) clustered by (id) sorted by (id) into 4 buckets;
select * from users;
raj	2
venkat	3
appu	4
sony	1
lg	5
nani	6

set hive.enforce.bucketing=true;
insert overwrite table bucketed_users select * from users;
insert overwrite table bucketed_sorted_users select * from users;

(or)

from users
insert overwrite table bucketed_users select *
insert overwrite table bucketed_sorted_users select *;

select * from bucketed_sorted_users tablesample ( bucket 1 out of 1 on id);
appu	4

select * from bucketed_sorted_users tablesample ( bucket 1 out of 2 on id);
appu	4
raj	2
nani	6

select * from bucketed_sorted_users tablesample ( bucket 1 out of 4 on rand());
raj	2

select * from bucketed_sorted_users tablesample ( bucket 1 out of 3 on id);
nani	6
venkat	3

create table bucketed_users_name (name string, id int) clustered by (name) into 4 buckets;
insert overwrite table bucketed_users_name select * from users;

=========================================================================================================================================
													SerDe:
=========================================================================================================================================
add jar /home/hadoop/work/hive-0.10.0/lib/hive-contrib-0.10.0.jar;
add jar /home/hadoop/work/hive-0.10.0/lib/hive-serde-0.10.0.jar;
add jar /home/hadoop/work/hive-0.10.0/lib/hive-common-0.10.0.jar;
add jar /home/hadoop/work/hive-0.10.0/lib/hive-exec-0.10.0.jar;

create table if not exists city_bid(name string, id string, bidding_city string, olympic_games string) row format serde 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe' with serdeproperties("input.regex" = "([^t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)") stored as textfile;

load data local inpath '${env:HOME}/work/hive_inputs/olympic_city_bid.tsv' overwrite into table city_bid ;
select * from city_bid;
create table if not exists city_bid_seqfile(name string,id string,bidding_city string,olympic_games string) row format delimited fields terminated by '\t' collection items terminated by '\002' map keys terminated by '\003' stored as sequencefile ;
create table if not exists city_bid_rcfile(name string,id string,bidding_city string,olympic_games string) stored as rcfile ;

//from city_bid
//insert overwrite table city_bid_seqfile select *
//insert overwrite table city_bid_rcfile select * ;

insert overwrite table city_bid_seqfile select * from city_bid;
insert overwrite table city_bid_rcfile select * from city_bid;

select * from city_bid limit 2 ;
select * from city_bid_seqfile limit 2 ;
select * from city_bid_rcfile limit 2 ;


Regex Serde for apache log:
---------------------------
CREATE TABLE if not exists apache_log (
  host STRING,
   identity STRING,
   user STRING,
   time STRING,
   request STRING,
   status STRING,
   size STRING,
   referer STRING,
   agent STRING
)
ROW FORMAT SERDE 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe'
WITH SERDEPROPERTIES (
"input.regex" = "([^ ]*) ([^ ]*) ([^ ]*) (-|\\[[^\\]]*\\]) ([^ \"]*|\"[^\"]*\") (-|[0-9]*) (-|[0-9]*)(?: ([^ \"]*|\"[^\"]*\") ([^ \"]*|\"[^\"]*\"))?",
"output.format.string" = "%1$s %2$s %3$s %4$s %5$s %6$s %7$s %8$s %9$s"
) 
STORED AS TEXTFILE;

LOAD DATA LOCAL INPATH '${env:HOME}/work/hive_inputs/apache_clf.txt' OVERWRITE INTO TABLE apache_log;


Custom SerDe:
-------------
add jar /home/hadoop/work/hive_inputs/udf.jar ;
create table if not exists columnar_city_bid(name string,id string,bidding_city string,olympic_games string)row format delimited fields terminated by '\t' collection items terminated by ',';
load data local inpath '${env:HOME}/work/hive_inputs/olympic_city_bid.tsv' overwrite into table columnar_city_bid;

create table city_bid_map(
name string,
id string,
bidding_city string,
olympic_games string)
row format serde 'orienit.hadoop.training.hive.SerDe.ColumnarMapSerDe'
location '/data/columnarmap_serde/' ;

insert overwrite table city_bid_map select * from columnar_city_bid ;
select * from columnar_city_bid limit 5 ;
select * from city_bid_map limit 5 ;

=========================================================================================================================================
														regex 
=========================================================================================================================================
drop table studentwrong;
create table if not exists studentwrong ( id int,name string, year int);
load data local inpath '/home/hadoop/work/hive_inputs/student.txt' overwrite into table studentwrong;

select * from studentwrong;

drop table apachelog;

CREATE TABLE apachelog (
mydata STRING
)
ROW FORMAT SERDE 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe'
WITH SERDEPROPERTIES (
"input.regex" = "([\s+]) ",
"output.format.string" = "%1$s"
) 
STORED AS TEXTFILE;


add jar /home/hadoop/work/hive-0.10.0/lib/hive-contrib-0.10.0.jar;
add jar /home/hadoop/work/hive-0.10.0/lib/hive-serde-0.10.0.jar;
add jar /home/hadoop/work/hive-0.10.0/lib/hive-common-0.10.0.jar;
add jar /home/hadoop/work/hive-0.10.0/lib/hive-exec-0.10.0.jar;

load data local inpath '/home/hadoop/work/hive_inputs/student.txt' overwrite into table apachelog;

select * from apachelog;

create table if not exists studentpart(name string, year int ) partitioned by (id int) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;

set hive.exec.dynamic.partition.mode=nonstrict;

insert overwrite table studentpart partition(id) select name,year,id from student;

create table if not exists studentpartd( year int ) partitioned by (id int,name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as textfile;

insert overwrite table studentpartd partition(id,name) select year,id,name from student;

=========================================================================================================================================






















